// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get_movie_with_limit.sql

package postgresql_in_action

import (
	"context"
)

const getMovieWithLimit = `-- name: GetMovieWithLimit :many
SELECT
    id, created_date, modified_date, available_globally, locale, original_title, release_date, runtime, title
FROM
    movie
LIMIT $1
`

func (q *Queries) GetMovieWithLimit(ctx context.Context, limit int32) ([]Movie, error) {
	rows, err := q.db.Query(ctx, getMovieWithLimit, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.AvailableGlobally,
			&i.Locale,
			&i.OriginalTitle,
			&i.ReleaseDate,
			&i.Runtime,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
