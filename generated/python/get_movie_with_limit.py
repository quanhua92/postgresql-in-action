# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: get_movie_with_limit.sql
from typing import AsyncIterator, Iterator

import sqlalchemy
import sqlalchemy.ext.asyncio

from postgresql_in_action import models


GET_MOVIE_WITH_LIMIT = """-- name: get_movie_with_limit \\:many
SELECT
    id, created_date, modified_date, available_globally, locale, original_title, release_date, runtime, title
FROM
    movie
LIMIT :p1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_movie_with_limit(self, *, limit: int) -> Iterator[models.Movie]:
        result = self._conn.execute(sqlalchemy.text(GET_MOVIE_WITH_LIMIT), {"p1": limit})
        for row in result:
            yield models.Movie(
                id=row[0],
                created_date=row[1],
                modified_date=row[2],
                available_globally=row[3],
                locale=row[4],
                original_title=row[5],
                release_date=row[6],
                runtime=row[7],
                title=row[8],
            )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_movie_with_limit(self, *, limit: int) -> AsyncIterator[models.Movie]:
        result = await self._conn.stream(sqlalchemy.text(GET_MOVIE_WITH_LIMIT), {"p1": limit})
        async for row in result:
            yield models.Movie(
                id=row[0],
                created_date=row[1],
                modified_date=row[2],
                available_globally=row[3],
                locale=row[4],
                original_title=row[5],
                release_date=row[6],
                runtime=row[7],
                title=row[8],
            )
